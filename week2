class Car: 
def _init_(self, make, model, year): 
self.make = make 
self.model = model 
self.year = year 
self.is_started = False 
def start(self): 
if not self.is_started:
self.is_started = True 
print(f"The {self.year} {self.make} {self.model} is starting.") 
else: 
print(f"The {self.year} {self.make} {self.model} is already running.") 
def stop(self): 
if self.is_started: 
self.is_started = False 
print(f"The {self.year} {self.make} {self.model} is stopping.") 
else: 
print(f"The {self.year} {self.make} {self.model} is already stopped.") 
# Create a car object 
print("---car class demonstration") 
my_car = Car("Toyota", "Camry", 2022) 
print(f"my car:{my_car.make} {my_car.model} ({my_car.year})") 
# Start and stop the car 
my_car.start() 
my_car.stop() 
my_car.start() 
my_car.stop() 

//
class Animal: 
def  init (self, name): 
self.name = name 
def speak(self): 
return "Some generic animal sound" 
def move(self): 
return "The animal moves around" 
# Derived Class - cat 
class cat(Animal): 
def speak(self): 
return f"{self.name} says: Meow! Meow!" 
def move(self): 
return f"{self.name} runs quietly." 
# Demonstration 
cat = cat("cutie") 
animals = [cat] 
for animal in animals: 
print(animal.speak()) 
print(animal.move()) 

//
class Animal: 
def make_sound(self): 
raise NotImplementedError("Subclass must implement abstract method 'make_sound'") 
class Dog(Animal): 
def make_sound(self): 
return "Woof! Woof!" 
class Cat(Animal):
def make_sound(self): 
return "Meow!" 
class Bird(Animal): 
def make_sound(self): 
return "Chirp! Chirp!" 
# Demonstrating polymorphism 
print("\n--- Polymorphism Demonstration ---") 
animals = [Dog(), Cat(), Bird()] 
for animal in animals: 
print(f"An animal makes sound: {animal.make_sound()}")
